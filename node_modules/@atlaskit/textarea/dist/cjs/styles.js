"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.themeStyles = exports.getBaseStyles = exports.borderWidth = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _constants = require("@atlaskit/theme/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var grid = (0, _constants.gridSize)();
var borderRadius = 3;
var lineHeightBase = grid * 2.5;
var lineHeightCompact = grid * 2;
var compactVerticalPadding = 2;
var verticalPadding = 6;
var horizontalPadding = grid;
var transitionDuration = '0.2s';
var fontSize = (0, _constants.fontSize)();
var fontFamily = (0, _constants.fontFamily)();
var codeFontFamily = (0, _constants.codeFontFamily)();
var borderWidth = 2; // Safari puts on some difficult to remove styles, mainly for disabled inputs
// but we want full control so need to override them in all cases

exports.borderWidth = borderWidth;
var overrideSafariDisabledStyles = {
  WebkitTextFillColor: 'unset',
  WebkitOpacity: '1'
};

var borderBoxMinHeight = function borderBoxMinHeight(minimumRows, borderHeight) {
  var contentHeight = lineHeightBase * minimumRows;
  return contentHeight + verticalPadding * 2 + borderHeight * 2;
};

var borderBoxMinHeightCompact = function borderBoxMinHeightCompact(minimumRows, borderHeight) {
  var contentHeightCompact = lineHeightCompact * minimumRows;
  return contentHeightCompact + compactVerticalPadding * 2 + borderHeight * 2;
};

var bgAndBorderColorStyles = function bgAndBorderColorStyles(props) {
  return {
    '&:focus': {
      backgroundColor: props.backgroundColorFocus,
      borderColor: props.borderColorFocus
    },
    '&:not(:focus)': {
      backgroundColor: props.backgroundColor,
      borderColor: props.borderColor
    },
    '&:disabled:focus': {
      backgroundColor: props.disabledRules.backgroundColorFocus,
      borderColor: props.disabledRules.borderColorFocus
    },
    '&:disabled:not(:focus)': {
      backgroundColor: props.disabledRules.backgroundColor,
      borderColor: props.disabledRules.borderColor
    },
    '&[data-invalid]:focus': {
      backgroundColor: props.invalidRules.backgroundColorFocus,
      borderColor: props.invalidRules.borderColorFocus
    },
    '&[data-invalid]:not(:focus)': {
      backgroundColor: props.invalidRules.backgroundColor,
      borderColor: props.invalidRules.borderColor
    }
  };
};

var placeholderStyle = function placeholderStyle(placeholderTextColor) {
  return {
    '&::placeholder': {
      color: placeholderTextColor
    }
  };
};

var hoverBackgroundStyle = function hoverBackgroundStyle(props) {
  return {
    '&:hover:not(:read-only):not(:focus)': {
      backgroundColor: props.backgroundColorHover,
      '&:disabled': {
        backgroundColor: props.disabledRules.backgroundColorHover
      },
      '&[data-invalid]': {
        backgroundColor: props.invalidRules.backgroundColorHover
      }
    }
  };
};

var resizeStyle = function resizeStyle(resize) {
  if (resize === 'horizontal' || resize === 'vertical') {
    return {
      resize: resize
    };
  }

  if (resize === 'auto') {
    return {
      resize: 'both'
    };
  }

  return {
    resize: 'none'
  };
};

var borderStyle = function borderStyle(appearance) {
  return {
    borderStyle: appearance === 'none' ? 'none' : 'solid'
  };
};

var fontFamilyStyle = function fontFamilyStyle(isMonospaced) {
  return {
    fontFamily: isMonospaced ? codeFontFamily : fontFamily
  };
};

var borderPaddingAndHeightStyles = function borderPaddingAndHeightStyles() {
  var minimumRows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var horizontalPaddingWithoutBorderWidth = horizontalPadding - borderWidth;
  var borderHeight = borderWidth;
  return {
    '&[data-compact]': {
      padding: "".concat(compactVerticalPadding, "px ").concat(horizontalPaddingWithoutBorderWidth, "px"),
      lineHeight: lineHeightCompact / fontSize,
      minHeight: borderBoxMinHeightCompact(minimumRows, borderHeight)
    },
    '&:not([data-compact])': {
      padding: "".concat(verticalPadding, "px ").concat(horizontalPaddingWithoutBorderWidth, "px"),
      lineHeight: lineHeightBase / fontSize,
      minHeight: borderBoxMinHeight(minimumRows, borderHeight)
    }
  };
};

var staticStyles = {
  flex: '1 1 100%',
  position: 'relative',
  borderRadius: borderRadius,
  boxSizing: 'border-box',
  overflow: 'auto',
  transition: "background-color ".concat(transitionDuration, " ease-in-out"),
  wordWrap: 'break-word',
  fontSize: fontSize,
  borderWidth: borderWidth,
  maxWidth: '100%',
  display: 'block',
  margin: 0,
  minWidth: 0,
  outline: 'none',
  width: '100%',
  '&:disabled': _objectSpread({
    cursor: 'not-allowed'
  }, overrideSafariDisabledStyles),
  '&::-ms-clear': {
    display: 'none'
  },
  '&:invalid': {
    boxShadow: 'none'
  }
};

var getBaseStyles = function getBaseStyles(_ref) {
  var minimumRows = _ref.minimumRows,
      resize = _ref.resize,
      appearance = _ref.appearance,
      isMonospaced = _ref.isMonospaced,
      maxHeight = _ref.maxHeight;
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, staticStyles), borderPaddingAndHeightStyles(minimumRows)), resizeStyle(resize)), borderStyle(appearance)), fontFamilyStyle(isMonospaced)), {}, {
    maxHeight: maxHeight
  });
};

exports.getBaseStyles = getBaseStyles;

var themeStyles = function themeStyles(props) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, bgAndBorderColorStyles(props)), hoverBackgroundStyle(props)), placeholderStyle(props.placeholderTextColor)), {}, {
    color: props.textColor,
    '&:disabled': {
      color: props.disabledRules.textColor
    }
  });
};

exports.themeStyles = themeStyles;