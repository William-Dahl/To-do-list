/// <reference types="react" />
export declare type ThemeAppearance = 'standard' | 'subtle' | 'none';
export declare type ThemeProps = {
    appearance: ThemeAppearance;
    mode: 'dark' | 'light';
};
export declare type ThemeTokens = {
    borderColor: string;
    borderColorFocus: string;
    backgroundColor: string;
    backgroundColorFocus: string;
    backgroundColorHover: string;
    disabledRules: {
        backgroundColor: string;
        backgroundColorFocus: string;
        backgroundColorHover: string;
        borderColor: string;
        borderColorFocus: string;
        textColor: string;
    };
    invalidRules: {
        borderColor: string;
        borderColorFocus: string;
        backgroundColor: string;
        backgroundColorFocus: string;
        backgroundColorHover: string;
    };
    textColor: string;
    placeholderTextColor: string;
};
export declare const themeTokens: {
    borderColor: {
        standard: {
            light: "var(--ds-border)";
            dark: "var(--ds-border)";
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    borderColorFocus: {
        standard: {
            light: "var(--ds-border-focused)";
            dark: "var(--ds-border-focused)";
        };
        subtle: {
            light: "var(--ds-border-focused)";
            dark: "var(--ds-border-focused)";
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColor: {
        standard: {
            light: "var(--ds-background-neutral)";
            dark: "var(--ds-background-neutral)";
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorFocus: {
        standard: {
            light: "var(--ds-surface)";
            dark: "var(--ds-surface)";
        };
        subtle: {
            light: "var(--ds-surface)";
            dark: "var(--ds-surface)";
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorHover: {
        standard: {
            light: "var(--ds-surface)";
            dark: "var(--ds-surface)";
        };
        subtle: {
            light: "var(--ds-background-neutral-subtle-hovered)";
            dark: "var(--ds-background-neutral-subtle-hovered)";
        };
        none: {
            light: string;
            dark: string;
        };
    };
    disabledRules: {
        light: {
            backgroundColor: "var(--ds-background-disabled)";
            backgroundColorFocus: "var(--ds-background-disabled)";
            backgroundColorHover: "var(--ds-background-disabled)";
            borderColor: "var(--ds-background-disabled)";
            borderColorFocus: "var(--ds-border-focused)";
            textColor: "var(--ds-text-disabled)";
        };
        dark: {
            backgroundColor: "var(--ds-background-disabled)";
            backgroundColorFocus: "var(--ds-background-disabled)";
            backgroundColorHover: "var(--ds-background-disabled)";
            borderColor: "var(--ds-background-disabled)";
            borderColorFocus: "var(--ds-border-focused)";
            textColor: "var(--ds-text-disabled)";
        };
    };
    invalidRules: {
        light: {
            borderColor: "var(--ds-border-danger)";
            borderColorFocus: "var(--ds-border-focused)";
            backgroundColor: "var(--ds-background-neutral)";
            backgroundColorFocus: "var(--ds-surface)";
            backgroundColorHover: "var(--ds-surface)";
        };
        dark: {
            borderColor: "var(--ds-border-danger)";
            borderColorFocus: "var(--ds-border-focused)";
            backgroundColor: "var(--ds-background-neutral)";
            backgroundColorFocus: "var(--ds-surface)";
            backgroundColorHover: "var(--ds-surface)";
        };
    };
    textColor: {
        light: "var(--ds-text)";
        dark: "var(--ds-text)";
    };
    placeholderTextColor: {
        light: "var(--ds-text-subtlest)";
        dark: "var(--ds-text-subtlest)";
    };
};
export declare const Theme: {
    Consumer: import("react").ComponentType<{
        children: (tokens: ThemeTokens) => import("react").ReactNode;
    } & ThemeProps>;
    Provider: import("react").ComponentType<{
        children?: import("react").ReactNode;
        value?: import("@atlaskit/theme/components").ThemeProp<ThemeTokens, ThemeProps> | undefined;
    }>;
    useTheme: (props: ThemeProps) => ThemeTokens;
};
