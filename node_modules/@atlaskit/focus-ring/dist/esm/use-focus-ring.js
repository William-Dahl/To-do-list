import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useRef, useState } from 'react';

/**
 * __Use focus ring__
 *
 * The `useFocusRing` hook is designed to manage focus for the `FocusRing` in cases where the `FocusRing`'s visual application
 * and the element that takes focus, differ. See the `focus` prop of `FocusRing` for more information.
 *
 * @example
 * ```jsx
 * import VisuallyHidden from '@atlaskit/visuall-hidden';
 * import FocusRing, { useFocusRing } from '@atlaskit/focus-ring';
 *
 * const InteractiveComponent = () => {
 *  const { focusState, focusProps } = useFocusRing();
 *
 *  return (
 *    <div>
 *      <VisuallHidden>
 *        <input {...focusProps} />
 *      </VisuallyHidden>
 *      <FocusRing focus={focusState}>
 *        <div role="button">Hello</div>
 *      </FocusRing>
 *    </div>
 *  );
 *
 * }
 * ```
 */
var useFocusRing = function useFocusRing() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'off';

  var _useState = useState(initialState),
      _useState2 = _slicedToArray(_useState, 2),
      focusState = _useState2[0],
      setFocusState = _useState2[1];

  var focusProps = useRef({
    onFocus: function onFocus() {
      return setFocusState('on');
    },
    onBlur: function onBlur() {
      return setFocusState('off');
    }
  });
  return {
    focusState: focusState,
    focusProps: focusProps.current
  };
};

export default useFocusRing;