"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _core = require("@emotion/core");

var _colors = require("@atlaskit/theme/colors");

/** @jsx jsx */
var BORDER_WIDTH = 2;
var baseFocusOutsideStyles = (0, _core.css)({
  outline: "".concat(BORDER_WIDTH, "px solid ").concat("var(--ds-border-focused, ".concat(_colors.B100, ")")),
  outlineOffset: BORDER_WIDTH
});
var baseInsetStyles = (0, _core.css)({
  boxShadow: "inset 0px 0px 0px ".concat(BORDER_WIDTH, "px ").concat("var(--ds-border-focused, ".concat(_colors.B100, ")")),
  outline: 'none'
});
var focusRingStyles = (0, _core.css)({
  '&:focus-visible': baseFocusOutsideStyles,
  '@supports not selector(*:focus-visible)': {
    '&:focus': baseFocusOutsideStyles
  },
  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {
    '&:focus-visible': {
      outline: '1px solid'
    }
  }
});
var insetFocusRingStyles = (0, _core.css)({
  '&:focus-visible': baseInsetStyles,
  '@supports not selector(*:focus-visible)': {
    '&:focus': baseInsetStyles
  },
  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {
    '&:focus-visible': {
      outline: '1px solid',
      outlineOffset: '-1px'
    }
  }
});
/**
 * __Focus ring__
 *
 * A focus ring is used indicate the currently focused item.
 *
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/focus-ring)
 *
 * @example
 * ```jsx
 * import FocusRing from '@atlaskit/focus-ring';
 *
 * const InteractiveComponent = () => (
 *   <FocusRing>
 *     <button type="button">Hello</button>
 *   </FocusRing>
 * )
 * ```
 */

var FocusRing = function FocusRing(_ref) {
  var children = _ref.children,
      isInset = _ref.isInset,
      focus = _ref.focus;
  var controlledStyles = isInset ? baseInsetStyles : baseFocusOutsideStyles;
  var uncontrolledStyles = isInset ? insetFocusRingStyles : focusRingStyles;
  var focusCls = typeof focus === 'undefined' ? uncontrolledStyles : focus === 'on' && controlledStyles;
  return (0, _core.jsx)(_core.ClassNames, null, function (_ref2) {
    var css = _ref2.css,
        cx = _ref2.cx;
    return _react.Children.only( // This may look unwieldy but means we skip applying styles / cloning if no className is applicable
    focusCls ?
    /*#__PURE__*/
    // eslint-disable-next-line @repo/internal/react/no-clone-element
    (0, _react.cloneElement)(children, {
      className: cx([css(focusCls), children.props.className])
    }) : children);
  });
};

var _default = FocusRing;
exports.default = _default;