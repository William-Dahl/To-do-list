"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _core = require("@emotion/core");

var _usePlatformLeafEventHandler = require("@atlaskit/analytics-next/usePlatformLeafEventHandler");

var _mergeRefs = _interopRequireDefault(require("@atlaskit/ds-lib/merge-refs"));

var _internal = require("./internal");

var _excluded = ["isChecked", "isDisabled", "isInvalid", "defaultChecked", "isIndeterminate", "size", "onChange", "analyticsContext", "label", "name", "value", "isRequired", "testId"];
// firefox doesn't handle cmd+click/ctrl+click properly
var isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
/* eslint-disable @repo/internal/styles/no-nested-styles */

var checkboxStyles = (0, _core.css)({
  width: 0,
  // Necessary to hide correctly on mobile Safari
  height: 0,
  // Necessary to hide correctly on mobile Safari
  margin: 0,
  appearance: 'none',
  border: 'none',
  // Necessary to hide correctly on mobile Safari
  outline: 'none',
  // Necessary to hide focus ring on Firefox
  '& + svg': {
    flexShrink: 0,
    alignSelf: 'flex-start',

    /**
     *  Change the variables --checkbox-background-color, --checkbox-border-color
     *  and --checkbox-tick-color according to user interactions.
     *  All other variables are constant.
     *  All styles from the input target the sibling svg.
     */
    '--checkbox-background-color': 'var(--local-background)',
    '--checkbox-border-color': 'var(--local-border)',
    '--checkbox-tick-color': 'var(--local-tick-rest)',
    color: 'var(--checkbox-background-color)',
    fill: 'var(--checkbox-tick-color)',
    transition: 'color 0.2s ease-in-out, fill 0.2s ease-in-out',
    'rect:first-of-type': {
      stroke: 'var(--checkbox-border-color)',
      strokeWidth: 2,
      transition: 'stroke 0.2s ease-in-out'
    }
  },
  '&&:focus + svg, &&:checked:focus + svg': {
    '--checkbox-border-color': 'var(--local-border-focus)'
  },
  '&:hover + svg': {
    '--checkbox-background-color': 'var(--local-background-hover)',
    '--checkbox-border-color': 'var(--local-border-hover)'
  },
  '&:checked:hover + svg': {
    '--checkbox-background-color': 'var(--local-background-checked-hover)',
    '--checkbox-border-color': 'var(--local-border-checked-hover)'
  },
  '&:checked + svg': {
    '--checkbox-background-color': 'var(--local-background-checked)',
    '--checkbox-border-color': 'var(--local-border-checked)',
    '--checkbox-tick-color': 'var(--local-tick-checked)'
  },
  '&[data-invalid] + svg': {
    '--checkbox-border-color': 'var(--local-border-invalid)'
  },
  '&:checked[data-invalid] + svg': {
    '--checkbox-border-color': 'var(--local-border-checked-invalid)'
  },
  '&:active + svg': {
    '--checkbox-background-color': 'var(--local-background-active)',
    '--checkbox-border-color': 'var(--local-border-active)'
  },
  '&:checked:active + svg': {
    '--checkbox-background-color': 'var(--local-background-active)',
    '--checkbox-border-color': 'var(--local-border-active)',
    '--checkbox-tick-color': 'var(--local-tick-active)'
  },
  '&:disabled + svg, &:disabled:hover + svg, &:disabled:focus + svg, &:disabled:active + svg, &:disabled[data-invalid] + svg': {
    '--checkbox-background-color': 'var(--local-background-disabled)',
    '--checkbox-border-color': 'var(--local-border-disabled)',
    cursor: 'not-allowed',
    pointerEvents: 'none'
  },
  '&:disabled:checked + svg': {
    '--checkbox-tick-color': 'var(--local-tick-disabled)'
  },
  '@media screen and (forced-colors: active)': {
    '& + svg': {
      '--checkbox-background-color': 'Canvas',
      '--checkbox-border-color': 'CanvasText',
      '--checkbox-tick-color': 'CanvasText'
    },
    '&:checked + svg, &:checked:hover + svg': {
      '--checkbox-background-color': 'Canvas',
      '--checkbox-border-color': 'CanvasText',
      '--checkbox-tick-color': 'CanvasText'
    },
    '&:focus + svg rect:first-of-type': {
      stroke: 'Highlight'
    },
    '&[data-invalid] + svg': {
      '--checkbox-border-color': 'Highlight'
    },
    '&:checked[data-invalid] + svg': {
      '--checkbox-border-color': 'Highlight'
    },
    '&:disabled + svg, &:disabled:hover + svg, &:disabled:focus + svg, &:disabled:active + svg, &:disabled[data-invalid] + svg': {
      '--checkbox-background-color': 'Canvas',
      '--checkbox-border-color': 'GrayText',
      '--checkbox-tick-color': 'GrayText'
    }
  }
});
/* eslint-enable @repo/internal/styles/no-nested-styles */

/**
 * __Checkbox__
 *
 * A checkbox an input control that allows a user to select one or more options from a number of choices.
 *
 * - [Examples](https://atlassian.design/components/checkbox/examples)
 * - [Code](https://atlassian.design/components/checkbox/code)
 * - [Usage](https://atlassian.design/components/checkbox/usage)
 */

var Checkbox = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Checkbox(props, ref) {
  var isCheckedProp = props.isChecked,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$isInvalid = props.isInvalid,
      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
      _props$defaultChecked = props.defaultChecked,
      defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,
      _props$isIndeterminat = props.isIndeterminate,
      isIndeterminate = _props$isIndeterminat === void 0 ? false : _props$isIndeterminat,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      onChangeProps = props.onChange,
      analyticsContext = props.analyticsContext,
      label = props.label,
      name = props.name,
      value = props.value,
      isRequired = props.isRequired,
      testId = props.testId,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded);

  var _useState = (0, _react.useState)(isCheckedProp !== undefined ? isCheckedProp : defaultChecked),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isCheckedState = _useState2[0],
      setIsCheckedState = _useState2[1];

  var onChange = (0, _react.useCallback)(function (e, analyticsEvent) {
    setIsCheckedState(e.target.checked);

    if (onChangeProps) {
      onChangeProps(e, analyticsEvent);
    }
  }, [onChangeProps]);
  var onChangeAnalytics = (0, _usePlatformLeafEventHandler.usePlatformLeafEventHandler)({
    fn: onChange,
    action: 'changed',
    analyticsData: analyticsContext,
    componentName: 'checkbox',
    packageName: "@atlaskit/checkbox",
    packageVersion: "12.3.9"
  });
  var internalRef = (0, _react.useRef)(null);
  var mergedRefs = (0, _mergeRefs.default)([internalRef, ref]); // firefox doesn't properly dispatch events from label to its child input elements

  var onClickLabel = function onClickLabel(event) {
    if (event.ctrlKey || event.metaKey || event.shiftKey) {
      var _internalRef$current;

      (_internalRef$current = internalRef.current) === null || _internalRef$current === void 0 ? void 0 : _internalRef$current.click();
    }
  }; // Use isChecked from the state if it is controlled


  var isChecked = isCheckedProp === undefined ? isCheckedState : isCheckedProp;
  return (0, _core.jsx)(_internal.Label, {
    isDisabled: isDisabled,
    testId: testId && "".concat(testId, "--checkbox-label"),
    onClick: isFirefox ? onClickLabel : undefined
  }, (0, _core.jsx)("input", (0, _extends2.default)({}, rest, {
    type: "checkbox",
    ref: mergedRefs,
    disabled: isDisabled,
    checked: isChecked,
    value: value,
    name: name,
    required: isRequired,
    css: checkboxStyles,
    onChange: onChangeAnalytics,
    "aria-checked": isIndeterminate ? 'mixed' : isChecked,
    "aria-invalid": isInvalid ? 'true' : undefined,
    "data-testid": testId && "".concat(testId, "--hidden-checkbox"),
    "data-invalid": isInvalid ? 'true' : undefined
  })), (0, _core.jsx)(_internal.CheckboxIcon, {
    size: size,
    isIndeterminate: isIndeterminate,
    isChecked: isChecked
  }), label && (0, _core.jsx)(_internal.LabelText, null, label, isRequired && (0, _core.jsx)(_internal.RequiredIndicator, null)));
}));
Checkbox.displayName = 'Checkbox';
var _default = Checkbox;
exports.default = _default;