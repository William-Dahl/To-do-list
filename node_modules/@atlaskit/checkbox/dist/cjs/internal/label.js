"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Label;

var _core = require("@emotion/core");

var _colors = require("@atlaskit/theme/colors");

var _components = require("@atlaskit/theme/components");

var _constants = require("./constants");

var _theme = _interopRequireDefault(require("./theme"));

/** @jsx jsx */
var labelStyles = (0, _core.css)({
  display: 'flex',
  alignItems: 'center',
  color: "var(--ds-text, ".concat(_colors.N900, ")"),
  cursor: 'default',
  fontFamily: _constants.fontFamily
});
var disabledStyles = (0, _core.css)({
  color: "var(--ds-text-disabled, ".concat(_colors.N80, ")"),
  cursor: 'not-allowed'
});
var themeStyles = {
  light: (0, _core.css)({
    /**
     * Background
     */
    '--local-background': _theme.default.light.boxColor.rest,
    '--local-background-active': _theme.default.light.boxColor.active,
    '--local-background-checked': _theme.default.light.boxColor.checked,
    '--local-background-checked-hover': _theme.default.light.boxColor.hoveredAndChecked,
    '--local-background-disabled': _theme.default.light.boxColor.disabled,
    '--local-background-hover': _theme.default.light.boxColor.hovered,

    /**
     * Border
     */
    '--local-border': _theme.default.light.borderColor.rest,
    '--local-border-active': _theme.default.light.borderColor.active,
    '--local-border-checked': _theme.default.light.borderColor.checked,
    '--local-border-checked-hover': _theme.default.light.borderColor.hoveredAndChecked,
    '--local-border-checked-invalid': _theme.default.light.borderColor.invalidAndChecked,
    '--local-border-disabled': _theme.default.light.borderColor.disabled,
    '--local-border-focus': _theme.default.light.borderColor.focused,
    '--local-border-hover': _theme.default.light.borderColor.hovered,
    '--local-border-invalid': _theme.default.light.borderColor.invalid,

    /**
     * Tick
     */
    '--local-tick-active': _theme.default.light.tickColor.activeAndChecked,
    '--local-tick-checked': _theme.default.light.tickColor.checked,
    '--local-tick-disabled': _theme.default.light.tickColor.disabledAndChecked,
    '--local-tick-rest': 'transparent'
  }),
  dark: (0, _core.css)({
    /**
     * Background
     */
    '--local-background': _theme.default.dark.boxColor.rest,
    '--local-background-active': _theme.default.dark.boxColor.active,
    '--local-background-checked': _theme.default.dark.boxColor.checked,
    '--local-background-checked-hover': _theme.default.dark.boxColor.hoveredAndChecked,
    '--local-background-disabled': _theme.default.dark.boxColor.disabled,
    '--local-background-hover': _theme.default.dark.boxColor.hovered,

    /**
     * Border
     */
    '--local-border': _theme.default.dark.borderColor.rest,
    '--local-border-active': _theme.default.dark.borderColor.active,
    '--local-border-checked': _theme.default.dark.borderColor.checked,
    '--local-border-checked-hover': _theme.default.dark.borderColor.hoveredAndChecked,
    '--local-border-checked-invalid': _theme.default.dark.borderColor.invalidAndChecked,
    '--local-border-disabled': _theme.default.dark.borderColor.disabled,
    '--local-border-focus': _theme.default.dark.borderColor.focused,
    '--local-border-hover': _theme.default.dark.borderColor.hovered,
    '--local-border-invalid': _theme.default.dark.borderColor.invalid,

    /**
     * Tick
     */
    '--local-tick-active': _theme.default.dark.tickColor.activeAndChecked,
    '--local-tick-checked': _theme.default.dark.tickColor.checked,
    '--local-tick-disabled': _theme.default.dark.tickColor.disabledAndChecked,
    '--local-tick-rest': 'transparent'
  })
};

function Label(_ref) {
  var children = _ref.children,
      isDisabled = _ref.isDisabled,
      testId = _ref.testId,
      onClick = _ref.onClick;

  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
      mode = _useGlobalTheme.mode;

  return (0, _core.jsx)("label", {
    css: [labelStyles, isDisabled && disabledStyles, mode === 'light' && themeStyles.light, mode === 'dark' && themeStyles.dark],
    "data-testid": testId,
    "data-disabled": isDisabled || undefined,
    onClick: onClick
  }, children);
}