import _extends from "@babel/runtime/helpers/extends";

/** @jsx jsx */
import { useCallback } from 'react';
import { css, jsx } from '@emotion/core';
import FocusLock from 'react-focus-lock';
import ScrollLock, { TouchScrollable } from 'react-scrolllock';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import Blanket from '@atlaskit/blanket';
import noop from '@atlaskit/ds-lib/noop';
import useCloseOnEscapePress from '@atlaskit/ds-lib/use-close-on-escape-press';
import FadeIn from '@atlaskit/motion/fade-in';
import Portal from '@atlaskit/portal';
import { layers } from '@atlaskit/theme/constants';
import ModalDialog from './internal/components/modal-dialog';
import useModalStack from './internal/hooks/use-modal-stack';
import usePreventProgrammaticScroll from './internal/hooks/use-prevent-programmatic-scroll';
const fillScreenStyles = css({
  width: '100vw',
  height: '100vh',
  position: 'fixed',
  top: 0,
  left: 0,
  overflowY: 'auto',
  WebkitOverflowScrolling: 'touch'
});

const ModalWrapper = props => {
  const {
    autoFocus = true,
    shouldCloseOnEscapePress = true,
    shouldCloseOnOverlayClick = true,
    shouldScrollInViewport = false,
    stackIndex: stackIndexOverride,
    onClose = noop,
    onStackChange = noop,
    isBlanketHidden,
    testId,
    ...modalDialogProps
  } = props;
  const calculatedStackIndex = useModalStack({
    onStackChange
  });
  const stackIndex = stackIndexOverride || calculatedStackIndex;
  const isForeground = stackIndex === 0; // When a user supplies a ref to focus we skip auto focus via react-focus-lock

  const autoFocusLock = typeof autoFocus === 'boolean' ? autoFocus : false;
  const onCloseHandler = usePlatformLeafEventHandler({
    fn: onClose,
    action: 'closed',
    componentName: 'modalDialog',
    packageName: "@atlaskit/modal-dialog",
    packageVersion: "12.2.5"
  });
  const onBlanketClicked = useCallback(e => {
    if (shouldCloseOnOverlayClick) {
      onCloseHandler(e);
    }
  }, [shouldCloseOnOverlayClick, onCloseHandler]);
  usePreventProgrammaticScroll();
  useCloseOnEscapePress({
    onClose: onCloseHandler,
    isDisabled: !shouldCloseOnEscapePress || !isForeground
  });
  const modalDialogWithBlanket = jsx(Blanket, {
    isTinted: !isBlanketHidden,
    onBlanketClicked: onBlanketClicked,
    testId: testId && `${testId}--blanket`
  }, jsx(ModalDialog, _extends({
    testId: testId,
    autoFocus: autoFocus,
    stackIndex: stackIndex,
    onClose: onCloseHandler,
    shouldScrollInViewport: shouldScrollInViewport
  }, modalDialogProps)));
  return jsx(Portal, {
    zIndex: layers.modal()
  }, jsx(FadeIn, null, fadeInProps => jsx("div", _extends({}, fadeInProps, {
    css: fillScreenStyles,
    "aria-hidden": !isForeground
  }), jsx(FocusLock, {
    autoFocus: autoFocusLock,
    disabled: !isForeground,
    returnFocus: true
  }, jsx(ScrollLock, null), shouldScrollInViewport ? jsx(TouchScrollable, null, modalDialogWithBlanket) : modalDialogWithBlanket))));
};

export default ModalWrapper;