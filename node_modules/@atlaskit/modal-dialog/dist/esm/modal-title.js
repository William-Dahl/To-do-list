/** @jsx jsx */
import { css, jsx } from '@emotion/core';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import WarningIcon from '@atlaskit/icon/glyph/warning';
import { useModal } from './hooks';
import { iconColor, titleIconMargin } from './internal/constants';
var fontSize = 20;
var lineHeight = 1;
var adjustedLineHeight = 1.2;
var titleStyles = css({
  display: 'flex',
  minWidth: 0,
  margin: 0,
  alignItems: 'center',
  fontSize: "".concat(fontSize, "px"),
  fontStyle: 'inherit',
  fontWeight: 500,
  letterSpacing: "-0.008em",
  lineHeight: lineHeight
});
var textStyles = css({
  minWidth: 0,

  /**
   * This ensures that the element fills the whole header space
   * and its content does not overflow (since flex items don't
   * shrink past its content size by default). */
  flex: '1 1 auto',
  wordWrap: 'break-word'
});
var iconStyles = css({
  marginRight: "".concat(titleIconMargin, "px"),

  /* Keeps the size of the icon the same, in case the text element grows in width. */
  flex: '0 0 auto'
});
/**
 * When the title is truncated (not multi-line), we adjust the
 * line height to avoid cropping the descenders. This removes
 * the extra spacing that we get from that adjustment. */

var lineHeightOffset = fontSize - fontSize * adjustedLineHeight;
var truncatedTextStyles = css({
  marginTop: "".concat(lineHeightOffset / 2, "px"),
  marginBottom: "".concat(lineHeightOffset / 2, "px"),
  lineHeight: adjustedLineHeight,
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
var truncatedTextIconStyles = css({
  marginBottom: "".concat(lineHeightOffset / 2, "px"),
  lineHeight: 1.2
});

var TitleIcon = function TitleIcon(_ref) {
  var appearance = _ref.appearance,
      isMultiline = _ref.isMultiline;
  var Icon = appearance === 'danger' ? ErrorIcon : WarningIcon;
  return jsx("span", {
    css: [iconStyles, !isMultiline && truncatedTextIconStyles]
  }, jsx(Icon, {
    label: "".concat(appearance, " icon"),
    primaryColor: iconColor[appearance]
  }));
};

var ModalTitle = function ModalTitle(props) {
  var appearance = props.appearance,
      children = props.children,
      _props$isMultiline = props.isMultiline,
      isMultiline = _props$isMultiline === void 0 ? true : _props$isMultiline,
      userDefinedTestId = props.testId;

  var _useModal = useModal(),
      titleId = _useModal.titleId,
      modalTestId = _useModal.testId;

  var testId = userDefinedTestId || modalTestId && "".concat(modalTestId, "--title");
  return jsx("h1", {
    css: titleStyles,
    "data-testid": testId
  }, appearance && jsx(TitleIcon, {
    appearance: appearance,
    isMultiline: isMultiline
  }), jsx("span", {
    id: titleId,
    css: [textStyles, !isMultiline && truncatedTextStyles],
    "data-testid": testId && "".concat(testId, "-text")
  }, children));
};

export default ModalTitle;